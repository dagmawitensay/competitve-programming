# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/

from collections import Counter

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        self.parents = {i: i for i in range(n)}
        self.sizes = [1] * n

        for i in range(n):
            for j in range(n):
                if i != j and graph[i][j]:
                    self.union(i, j)
        
        counts = Counter(self.find(i) for i in initial)

        max_count, index = -1, min(initial)
        for i in initial:
            root = self.find(i)
            if counts[root] == 1:
                if self.size(root) > max_count:
                    max_count = self.size(root)
                    index = i
                elif self.size(root) == max_count and i < index:
                    max_count = self.size(root)
                    index = i

        return index

    def find(self, node):
        if self.parents[node] == node:
            return node
        
        self.parents[node] = self.find(self.parents[node])
        return self.parents[node]
    
    def union(self, node1, node2):
        root1 = self.find(node1)
        root2 = self.find(node2)

        if root1 != root2:
            self.parents[root1] = root2
            self.sizes[root2] += self.sizes[root1]
        
    
    def size(self, node):
        return self.sizes[self.find(node)]
    

